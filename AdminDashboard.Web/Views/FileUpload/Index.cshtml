@using AdminDashboard.Web.Models
@model List<FileInfoModel>
@{
    ViewData["Title"] = "File Management";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

<div class="page-header">
    <h1 class="page-title">
        <i class="fas fa-folder-open me-2"></i>File Management
    </h1>
    <div class="page-actions">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#uploadModal">
            <i class="fas fa-upload me-2"></i>Upload Files
        </button>
        <button type="button" class="btn btn-success d-none" id="btnDownloadSelected">
            <i class="fas fa-download me-2"></i>Download Selected
        </button>
        <button type="button" class="btn btn-danger d-none" id="btnDeleteSelected">
            <i class="fas fa-trash me-2"></i>Delete Selected
        </button>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Statistics Cards -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="stat-card">
            <div class="stat-icon bg-primary">
                <i class="fas fa-file"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.Count</div>
                <div class="stat-label">Total Files</div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="stat-card">
            <div class="stat-icon bg-success">
                <i class="fas fa-hdd"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@((Model.Sum(f => f.FileSizeBytes) / 1024.0 / 1024.0).ToString("F2")) MB</div>
                <div class="stat-label">Total Size</div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="stat-card">
            <div class="stat-icon bg-info">
                <i class="fas fa-clock"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@(Model.Any() ? Model.Max(f => f.UploadDate).ToString("MMM dd") : "N/A")</div>
                <div class="stat-label">Last Upload</div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="stat-card">
            <div class="stat-icon bg-warning">
                <i class="fas fa-shield-alt"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@((ViewBag.MaxFileSize / 1024 / 1024)) MB</div>
                <div class="stat-label">Max File Size</div>
            </div>
        </div>
    </div>
</div>

<!-- File Manager Card -->
<div class="content-card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div>
            <h5 class="mb-0"><i class="fas fa-folder-open me-2"></i>Files</h5>
        </div>
        <div class="d-flex gap-2">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-sm btn-outline-secondary active" id="viewGrid">
                    <i class="fas fa-th"></i> Grid
                </button>
                <button type="button" class="btn btn-sm btn-outline-secondary" id="viewList">
                    <i class="fas fa-list"></i> List
                </button>
            </div>
            <div class="input-group" style="width: 300px;">
                <span class="input-group-text"><i class="fas fa-search"></i></span>
                <input type="text" class="form-control" id="searchFiles" placeholder="Search files...">
            </div>
        </div>
    </div>
    <div class="card-body">
        @if (Model.Count == 0)
        {
            <div class="text-center py-5">
                <i class="fas fa-folder-open fa-5x text-muted mb-3"></i>
                <h5 class="text-muted">No files uploaded yet</h5>
                <p class="text-muted">Click "Upload Files" button to start uploading</p>
            </div>
        }
        else
        {
            <!-- Grid View -->
            <div id="gridView" class="row g-3">
                @foreach (var file in Model)
                {
                    <div class="col-md-3 col-lg-2 file-item" data-filename="@file.FileName.ToLower()" data-extension="@file.FileExtension.ToLower()">
                        <div class="file-card">
                            <div class="file-checkbox">
                                <input type="checkbox" class="form-check-input file-select" value="@file.FileName">
                            </div>
                            <div class="file-preview">
                                @if (new[] { ".jpg", ".jpeg", ".png", ".gif" }.Contains(file.FileExtension.ToLower()))
                                {
                                    <img src="@file.FilePath" alt="@file.FileName" class="file-thumbnail" onclick="previewFile('@file.FilePath', '@file.FileName')" />
                                }
                                else
                                {
                                    <div class="file-icon-large">
                                        <i class="fas @GetFileIcon(file.FileExtension)"></i>
                                    </div>
                                }
                            </div>
                            <div class="file-info">
                                <div class="file-name" title="@file.FileName">@file.FileName</div>
                                <div class="file-size">@file.FileSize</div>
                                <div class="file-date">@file.UploadDate.ToString("MMM dd, yyyy")</div>
                            </div>
                            <div class="file-actions">
                                <button class="btn btn-sm btn-primary" onclick="downloadFile('@file.FileName')" title="Download">
                                    <i class="fas fa-download"></i>
                                </button>
                                @if (new[] { ".jpg", ".jpeg", ".png", ".gif" }.Contains(file.FileExtension.ToLower()))
                                {
                                    <button class="btn btn-sm btn-info" onclick="previewFile('@file.FilePath', '@file.FileName')" title="Preview">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                }
                                <button class="btn btn-sm btn-secondary" onclick="showFileDetails('@file.FileName')" title="Details">
                                    <i class="fas fa-info-circle"></i>
                                </button>
                                <div class="dropdown d-inline">
                                    <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="#" onclick="renameFile('@file.FileName'); return false;"><i class="fas fa-edit me-2"></i>Rename</a></li>
                                        <li><a class="dropdown-item" href="#" onclick="copyFile('@file.FileName'); return false;"><i class="fas fa-copy me-2"></i>Copy</a></li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li><a class="dropdown-item text-danger" href="#" onclick="deleteFile('@file.FileName'); return false;"><i class="fas fa-trash me-2"></i>Delete</a></li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- List View (Hidden by default) -->
            <div id="listView" class="d-none">
                <div class="table-responsive">
                    <table class="table table-hover" id="filesTable">
                        <thead>
                            <tr>
                                <th width="30">
                                    <input type="checkbox" class="form-check-input" id="selectAll">
                                </th>
                                <th>Preview</th>
                                <th>File Name</th>
                                <th>Size</th>
                                <th>Type</th>
                                <th>Upload Date</th>
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var file in Model)
                            {
                                <tr class="file-row" data-filename="@file.FileName.ToLower()" data-extension="@file.FileExtension.ToLower()">
                                    <td>
                                        <input type="checkbox" class="form-check-input file-select" value="@file.FileName">
                                    </td>
                                    <td>
                                        @if (new[] { ".jpg", ".jpeg", ".png", ".gif" }.Contains(file.FileExtension.ToLower()))
                                        {
                                            <img src="@file.FilePath" alt="@file.FileName" class="file-preview-img" 
                                                 onclick="previewFile('@file.FilePath', '@file.FileName')" />
                                        }
                                        else
                                        {
                                            <i class="fas @GetFileIcon(file.FileExtension) fa-2x"></i>
                                        }
                                    </td>
                                    <td><strong>@file.FileName</strong></td>
                                    <td><span class="badge bg-secondary">@file.FileSize</span></td>
                                    <td><span class="badge bg-info">@file.FileExtension.ToUpper()</span></td>
                                    <td><small>@file.UploadDate.ToString("MMM dd, yyyy hh:mm tt")</small></td>
                                    <td class="text-center">
                                        <button class="btn btn-sm btn-success" onclick="downloadFile('@file.FileName')" title="Download">
                                            <i class="fas fa-download"></i>
                                        </button>
                                        @if (new[] { ".jpg", ".jpeg", ".png", ".gif" }.Contains(file.FileExtension.ToLower()))
                                        {
                                            <button class="btn btn-sm btn-info" onclick="previewFile('@file.FilePath', '@file.FileName')" title="Preview">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                        }
                                        <button class="btn btn-sm btn-secondary" onclick="showFileDetails('@file.FileName')" title="Details">
                                            <i class="fas fa-info-circle"></i>
                                        </button>
                                        <button class="btn btn-sm btn-warning" onclick="renameFile('@file.FileName')" title="Rename">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-primary" onclick="copyFile('@file.FileName')" title="Copy">
                                            <i class="fas fa-copy"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger" onclick="deleteFile('@file.FileName')" title="Delete">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

<!-- Upload Modal -->
<div class="modal fade" id="uploadModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">
                    <i class="fas fa-cloud-upload-alt me-2"></i>Upload Files
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <ul class="nav nav-tabs mb-3" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="single-tab" data-bs-toggle="tab" 
                                data-bs-target="#single" type="button" role="tab">
                            <i class="fas fa-file me-2"></i>Single File
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="multiple-tab" data-bs-toggle="tab" 
                                data-bs-target="#multiple" type="button" role="tab">
                            <i class="fas fa-files me-2"></i>Multiple Files
                        </button>
                    </li>
                </ul>

                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>Allowed types:</strong> @ViewBag.AllowedExtensions<br>
                    <strong>Max size:</strong> @((ViewBag.MaxFileSize / 1024 / 1024)) MB per file
                </div>

                <div class="tab-content">
                    <!-- Single File Upload -->
                    <div class="tab-pane fade show active" id="single" role="tabpanel">
                        <form asp-action="Upload" method="post" enctype="multipart/form-data" id="singleUploadForm">
                            @Html.AntiForgeryToken()
                            <div class="upload-area" id="singleDropArea">
                                <i class="fas fa-cloud-upload-alt fa-4x text-primary mb-3"></i>
                                <h5>Drag & Drop File Here</h5>
                                <p class="text-muted">or</p>
                                <input type="file" name="file" id="singleFileInput" class="d-none" required />
                                <button type="button" class="btn btn-primary" onclick="document.getElementById('singleFileInput').click()">
                                    <i class="fas fa-folder-open me-2"></i>Browse File
                                </button>
                                <div id="singleFileName" class="mt-3 fw-bold text-success"></div>
                            </div>
                        </form>
                    </div>

                    <!-- Multiple Files Upload -->
                    <div class="tab-pane fade" id="multiple" role="tabpanel">
                        <form asp-action="UploadMultiple" method="post" enctype="multipart/form-data" id="multipleUploadForm">
                            @Html.AntiForgeryToken()
                            <div class="upload-area" id="multipleDropArea">
                                <i class="fas fa-cloud-upload-alt fa-4x text-primary mb-3"></i>
                                <h5>Drag & Drop Files Here</h5>
                                <p class="text-muted">or</p>
                                <input type="file" name="files" id="multipleFileInput" class="d-none" multiple />
                                <button type="button" class="btn btn-primary" onclick="document.getElementById('multipleFileInput').click()">
                                    <i class="fas fa-folder-open me-2"></i>Browse Files
                                </button>
                                <div id="multipleFileNames" class="mt-3 fw-bold text-success"></div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-primary" onclick="submitUpload()">
                    <i class="fas fa-upload me-2"></i>Upload
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Preview Modal -->
<div class="modal fade" id="previewModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="previewModalTitle">File Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
                <img id="previewImage" src="" alt="" style="max-width: 100%; height: auto; max-height: 70vh;" />
            </div>
        </div>
    </div>
</div>

<!-- File Details Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title"><i class="fas fa-info-circle me-2"></i>File Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="fileDetailsContent">
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Rename Modal -->
<div class="modal fade" id="renameModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning">
                <h5 class="modal-title"><i class="fas fa-edit me-2"></i>Rename File</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="renameOldFileName">
                <div class="mb-3">
                    <label class="form-label">Current Name:</label>
                    <input type="text" class="form-control" id="renameCurrentName" readonly>
                </div>
                <div class="mb-3">
                    <label class="form-label">New Name:</label>
                    <input type="text" class="form-control" id="renameNewName" placeholder="Enter new file name">
                    <small class="form-text text-muted">Extension will be preserved automatically</small>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-warning" onclick="submitRename()">
                    <i class="fas fa-check me-2"></i>Rename
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Hidden Forms -->
<form id="deleteForm" asp-action="Delete" method="post" style="display:none;">
    @Html.AntiForgeryToken()
    <input type="hidden" name="fileName" id="deleteFileName" />
</form>

@functions {
    string GetFileIcon(string extension)
    {
        return extension.ToLower() switch
        {
            ".pdf" => "fa-file-pdf text-danger",
            ".doc" or ".docx" => "fa-file-word text-primary",
            ".xls" or ".xlsx" => "fa-file-excel text-success",
            ".txt" => "fa-file-alt text-secondary",
            ".zip" => "fa-file-archive text-warning",
            ".jpg" or ".jpeg" or ".png" or ".gif" => "fa-file-image text-info",
            _ => "fa-file text-muted"
        };
    }
}

@section Styles {
    <style>
        .stat-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: flex;
            align-items: center;
            gap: 15px;
            transition: all 0.3s;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
        }

        .stat-content {
            flex: 1;
        }

        .stat-number {
            font-size: 24px;
            font-weight: bold;
            color: #333;
        }

        .stat-label {
            color: #666;
            font-size: 14px;
        }

        .file-card {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            transition: all 0.3s;
            position: relative;
            height: 100%;
        }

        .file-card:hover {
            border-color: #007bff;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }

        .file-checkbox {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 10;
        }

        .file-preview {
            height: 120px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 10px;
        }

        .file-thumbnail {
            max-width: 100%;
            max-height: 100%;
            border-radius: 5px;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .file-thumbnail:hover {
            transform: scale(1.05);
        }

        .file-icon-large {
            font-size: 60px;
        }

        .file-info {
            margin-bottom: 10px;
        }

        .file-name {
            font-weight: bold;
            font-size: 14px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            margin-bottom: 5px;
        }

        .file-size, .file-date {
            font-size: 12px;
            color: #666;
        }

        .file-actions {
            display: flex;
            gap: 5px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .upload-area {
            border: 3px dashed #ddd;
            border-radius: 10px;
            padding: 50px 20px;
            text-align: center;
            transition: all 0.3s;
            min-height: 300px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .upload-area:hover {
            border-color: #007bff;
            background: #f8f9fa;
        }

        .upload-area.dragover {
            border-color: #28a745;
            background: #e7f5ec;
        }

        .file-preview-img {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: 5px;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .file-preview-img:hover {
            transform: scale(1.1);
        }

        #filesTable {
            font-size: 14px;
        }

        .page-actions {
            display: flex;
            gap: 10px;
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // View Toggle
        $('#viewGrid').click(function() {
            $(this).addClass('active');
            $('#viewList').removeClass('active');
            $('#gridView').removeClass('d-none');
            $('#listView').addClass('d-none');
        });

        $('#viewList').click(function() {
            $(this).addClass('active');
            $('#viewGrid').removeClass('active');
            $('#listView').removeClass('d-none');
            $('#gridView').addClass('d-none');
        });

        // Search functionality
        $('#searchFiles').on('keyup', function() {
            var searchText = $(this).val().toLowerCase();
            $('.file-item, .file-row').each(function() {
                var fileName = $(this).data('filename');
                if (fileName.indexOf(searchText) > -1) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        });

        // Select All
        $('#selectAll').change(function() {
            $('.file-select').prop('checked', $(this).prop('checked'));
            updateBulkButtons();
        });

        // Individual checkbox
        $(document).on('change', '.file-select', function() {
            updateBulkButtons();
        });

        function updateBulkButtons() {
            var selected = $('.file-select:checked').length;
            if (selected > 0) {
                $('#btnDownloadSelected, #btnDeleteSelected').removeClass('d-none');
            } else {
                $('#btnDownloadSelected, #btnDeleteSelected').addClass('d-none');
            }
        }

        // Download Selected
        $('#btnDownloadSelected').click(function() {
            var selected = [];
            $('.file-select:checked').each(function() {
                selected.push($(this).val());
            });
            
            if (selected.length > 0) {
                var url = '@Url.Action("DownloadMultiple", "FileUpload")?' + 
                    selected.map(f => 'fileNames=' + encodeURIComponent(f)).join('&');
                window.location.href = url;
            }
        });

        // Delete Selected
        $('#btnDeleteSelected').click(function() {
            var selected = [];
            $('.file-select:checked').each(function() {
                selected.push($(this).val());
            });
            
            if (selected.length > 0) {
                Swal.fire({
                    title: 'Delete Multiple Files?',
                    text: `Are you sure you want to delete ${selected.length} file(s)?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Yes, delete them!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '@Url.Action("DeleteMultiple", "FileUpload")',
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify(selected),
                            headers: {
                                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                            },
                            success: function(response) {
                                if (response.success) {
                                    Swal.fire('Deleted!', response.message, 'success').then(() => {
                                        location.reload();
                                    });
                                } else {
                                    Swal.fire('Error', response.message, 'error');
                                }
                            },
                            error: function() {
                                Swal.fire('Error', 'An error occurred while deleting files.', 'error');
                            }
                        });
                    }
                });
            }
        });

        // Single file upload drag and drop
        const singleFileInput = document.getElementById('singleFileInput');
        const singleDropArea = document.getElementById('singleDropArea');
        const singleFileName = document.getElementById('singleFileName');

        singleFileInput.addEventListener('change', function() {
            if (this.files.length > 0) {
                singleFileName.innerHTML = `<i class="fas fa-check-circle me-2"></i>${this.files[0].name}`;
            }
        });

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            singleDropArea.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            singleDropArea.addEventListener(eventName, () => {
                singleDropArea.classList.add('dragover');
            }, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            singleDropArea.addEventListener(eventName, () => {
                singleDropArea.classList.remove('dragover');
            }, false);
        });

        singleDropArea.addEventListener('drop', function(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            singleFileInput.files = files;
            if (files.length > 0) {
                singleFileName.innerHTML = `<i class="fas fa-check-circle me-2"></i>${files[0].name}`;
            }
        });

        // Multiple files upload drag and drop
        const multipleFileInput = document.getElementById('multipleFileInput');
        const multipleDropArea = document.getElementById('multipleDropArea');
        const multipleFileNames = document.getElementById('multipleFileNames');

        multipleFileInput.addEventListener('change', function() {
            if (this.files.length > 0) {
                let fileList = `<strong>${this.files.length} file(s) selected:</strong><br>`;
                for (let i = 0; i < Math.min(this.files.length, 5); i++) {
                    fileList += `<i class="fas fa-check-circle me-2"></i>${this.files[i].name}<br>`;
                }
                if (this.files.length > 5) {
                    fileList += `<em>... and ${this.files.length - 5} more</em>`;
                }
                multipleFileNames.innerHTML = fileList;
            }
        });

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            multipleDropArea.addEventListener(eventName, preventDefaults, false);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            multipleDropArea.addEventListener(eventName, () => {
                multipleDropArea.classList.add('dragover');
            }, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            multipleDropArea.addEventListener(eventName, () => {
                multipleDropArea.classList.remove('dragover');
            }, false);
        });

        multipleDropArea.addEventListener('drop', function(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            multipleFileInput.files = files;
            if (files.length > 0) {
                let fileList = `<strong>${files.length} file(s) selected:</strong><br>`;
                for (let i = 0; i < Math.min(files.length, 5); i++) {
                    fileList += `<i class="fas fa-check-circle me-2"></i>${files[i].name}<br>`;
                }
                if (files.length > 5) {
                    fileList += `<em>... and ${files.length - 5} more</em>`;
                }
                multipleFileNames.innerHTML = fileList;
            }
        });

        function submitUpload() {
            const activeTab = document.querySelector('.tab-pane.active');
            if (activeTab.id === 'single') {
                if (singleFileInput.files.length === 0) {
                    Swal.fire('Error', 'Please select a file to upload', 'error');
                    return;
                }
                document.getElementById('singleUploadForm').submit();
            } else {
                if (multipleFileInput.files.length === 0) {
                    Swal.fire('Error', 'Please select at least one file to upload', 'error');
                    return;
                }
                document.getElementById('multipleUploadForm').submit();
            }
        }

        function downloadFile(fileName) {
            window.location.href = '@Url.Action("Download", "FileUpload")?fileName=' + encodeURIComponent(fileName);
        }

        function deleteFile(fileName) {
            Swal.fire({
                title: 'Delete File?',
                text: `Are you sure you want to delete "${fileName}"?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    document.getElementById('deleteFileName').value = fileName;
                    document.getElementById('deleteForm').submit();
                }
            });
        }

        function previewFile(filePath, fileName) {
            document.getElementById('previewModalTitle').textContent = fileName;
            document.getElementById('previewImage').src = filePath;
            new bootstrap.Modal(document.getElementById('previewModal')).show();
        }

        function showFileDetails(fileName) {
            $.ajax({
                url: '@Url.Action("GetFileDetails", "FileUpload")',
                type: 'GET',
                data: { fileName: fileName },
                success: function(response) {
                    if (response.success) {
                        var html = `
                            <table class="table table-bordered">
                                <tr><th>File Name:</th><td>${response.fileName}</td></tr>
                                <tr><th>File Size:</th><td>${response.fileSize}</td></tr>
                                <tr><th>File Type:</th><td><span class="badge bg-info">${response.extension.toUpperCase()}</span></td></tr>
                                <tr><th>Created:</th><td>${response.created}</td></tr>
                                <tr><th>Modified:</th><td>${response.modified}</td></tr>
                                <tr><th>Path:</th><td><code>${response.path}</code></td></tr>
                            </table>
                        `;
                        $('#fileDetailsContent').html(html);
                        new bootstrap.Modal(document.getElementById('detailsModal')).show();
                    } else {
                        Swal.fire('Error', response.message, 'error');
                    }
                },
                error: function() {
                    Swal.fire('Error', 'Failed to load file details', 'error');
                }
            });
        }

        function renameFile(fileName) {
            $('#renameOldFileName').val(fileName);
            $('#renameCurrentName').val(fileName);
            $('#renameNewName').val(fileName.substring(0, fileName.lastIndexOf('.')));
            new bootstrap.Modal(document.getElementById('renameModal')).show();
        }

        function submitRename() {
            var oldFileName = $('#renameOldFileName').val();
            var newFileName = $('#renameNewName').val();
            
            if (!newFileName) {
                Swal.fire('Error', 'Please enter a new file name', 'error');
                return;
            }

            $.ajax({
                url: '@Url.Action("Rename", "FileUpload")',
                type: 'POST',
                data: {
                    oldFileName: oldFileName,
                    newFileName: newFileName,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        bootstrap.Modal.getInstance(document.getElementById('renameModal')).hide();
                        Swal.fire('Success', response.message, 'success').then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire('Error', response.message, 'error');
                    }
                },
                error: function() {
                    Swal.fire('Error', 'An error occurred while renaming the file', 'error');
                }
            });
        }

        function copyFile(fileName) {
            Swal.fire({
                title: 'Copy File?',
                text: `Create a copy of "${fileName}"?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#007bff',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, copy it!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("Copy", "FileUpload")',
                        type: 'POST',
                        data: {
                            fileName: fileName,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                            if (response.success) {
                                Swal.fire('Success', response.message, 'success').then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire('Error', response.message, 'error');
                            }
                        },
                        error: function() {
                            Swal.fire('Error', 'An error occurred while copying the file', 'error');
                        }
                    });
                }
            });
        }
    </script>
}
